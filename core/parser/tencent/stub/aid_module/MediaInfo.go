// Package aid_module comment
// This file war generated by trpc4videopacket 1.0
// Generated from aid_module.jce
package aid_module

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// MediaInfo struct implement
type MediaInfo struct {
	StrVid    string `json:"strVid,omitempty"`
	StrCid    string `json:"strCid,omitempty"`
	StrPreVid string `json:"strPreVid,omitempty"`
	BLive     bool   `json:"bLive,omitempty"`
	LLivePid  int64  `json:"lLivePid,omitempty"`
}

func (st *MediaInfo) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *MediaInfo) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.StrVid, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.StrCid, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.StrPreVid, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.BLive, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.LLivePid, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *MediaInfo) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require MediaInfo, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *MediaInfo) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = _os.Write_string(st.StrVid, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.StrCid, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.StrPreVid, 3)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.BLive, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.LLivePid, 5)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *MediaInfo) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
