// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ad_packet

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor(in *jlexer.Lexer, out *ResponseFromAdaptor_SourceData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "iSourceIdType":
			if in.IsNull() {
				in.Skip()
				out.ISourceIdType = nil
			} else {
				if out.ISourceIdType == nil {
					out.ISourceIdType = new(int32)
				}
				*out.ISourceIdType = int32(in.Int32())
			}
		case "strSourceId":
			if in.IsNull() {
				in.Skip()
				out.StrSourceId = nil
			} else {
				if out.StrSourceId == nil {
					out.StrSourceId = new(string)
				}
				*out.StrSourceId = string(in.String())
			}
		case "iUserTypeReq":
			if in.IsNull() {
				in.Skip()
				out.IUserTypeReq = nil
			} else {
				if out.IUserTypeReq == nil {
					out.IUserTypeReq = new(int32)
				}
				*out.IUserTypeReq = int32(in.Int32())
			}
		case "iVipInfoRsp":
			if in.IsNull() {
				in.Skip()
				out.IVipInfoRsp = nil
			} else {
				if out.IVipInfoRsp == nil {
					out.IVipInfoRsp = new(int32)
				}
				*out.IVipInfoRsp = int32(in.Int32())
			}
		case "iVideoType":
			if in.IsNull() {
				in.Skip()
				out.IVideoType = nil
			} else {
				if out.IVideoType == nil {
					out.IVideoType = new(int32)
				}
				*out.IVideoType = int32(in.Int32())
			}
		case "iPayFlag":
			if in.IsNull() {
				in.Skip()
				out.IPayFlag = nil
			} else {
				if out.IPayFlag == nil {
					out.IPayFlag = new(int32)
				}
				*out.IPayFlag = int32(in.Int32())
			}
		case "iCheckLogin":
			if in.IsNull() {
				in.Skip()
				out.ICheckLogin = nil
			} else {
				if out.ICheckLogin == nil {
					out.ICheckLogin = new(int32)
				}
				*out.ICheckLogin = int32(in.Int32())
			}
		case "iCheckUser":
			if in.IsNull() {
				in.Skip()
				out.ICheckUser = nil
			} else {
				if out.ICheckUser == nil {
					out.ICheckUser = new(int32)
				}
				*out.ICheckUser = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor(out *jwriter.Writer, in ResponseFromAdaptor_SourceData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ISourceIdType != nil {
		const prefix string = ",\"iSourceIdType\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(*in.ISourceIdType))
	}
	if in.StrSourceId != nil {
		const prefix string = ",\"strSourceId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StrSourceId))
	}
	if in.IUserTypeReq != nil {
		const prefix string = ",\"iUserTypeReq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IUserTypeReq))
	}
	if in.IVipInfoRsp != nil {
		const prefix string = ",\"iVipInfoRsp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IVipInfoRsp))
	}
	if in.IVideoType != nil {
		const prefix string = ",\"iVideoType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IVideoType))
	}
	if in.IPayFlag != nil {
		const prefix string = ",\"iPayFlag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IPayFlag))
	}
	if in.ICheckLogin != nil {
		const prefix string = ",\"iCheckLogin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ICheckLogin))
	}
	if in.ICheckUser != nil {
		const prefix string = ",\"iCheckUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ICheckUser))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFromAdaptor_SourceData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFromAdaptor_SourceData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFromAdaptor_SourceData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFromAdaptor_SourceData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor(l, v)
}
func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor1(in *jlexer.Lexer, out *ResponseFromAdaptor_SceneDotData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uID":
			if in.IsNull() {
				in.Skip()
				out.UID = nil
			} else {
				if out.UID == nil {
					out.UID = new(uint32)
				}
				*out.UID = uint32(in.Uint32())
			}
		case "uTime":
			if in.IsNull() {
				in.Skip()
				out.UTime = nil
			} else {
				if out.UTime == nil {
					out.UTime = new(uint32)
				}
				*out.UTime = uint32(in.Uint32())
			}
		case "uSceneType":
			if in.IsNull() {
				in.Skip()
				out.USceneType = nil
			} else {
				in.Delim('[')
				if out.USceneType == nil {
					if !in.IsDelim(']') {
						out.USceneType = make([]uint32, 0, 16)
					} else {
						out.USceneType = []uint32{}
					}
				} else {
					out.USceneType = (out.USceneType)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint32
					v1 = uint32(in.Uint32())
					out.USceneType = append(out.USceneType, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uPackId":
			if in.IsNull() {
				in.Skip()
				out.UPackId = nil
			} else {
				in.Delim('[')
				if out.UPackId == nil {
					if !in.IsDelim(']') {
						out.UPackId = make([]uint32, 0, 16)
					} else {
						out.UPackId = []uint32{}
					}
				} else {
					out.UPackId = (out.UPackId)[:0]
				}
				for !in.IsDelim(']') {
					var v2 uint32
					v2 = uint32(in.Uint32())
					out.UPackId = append(out.UPackId, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor1(out *jwriter.Writer, in ResponseFromAdaptor_SceneDotData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UID != nil {
		const prefix string = ",\"uID\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(*in.UID))
	}
	if in.UTime != nil {
		const prefix string = ",\"uTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.UTime))
	}
	if len(in.USceneType) != 0 {
		const prefix string = ",\"uSceneType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.USceneType {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.UPackId) != 0 {
		const prefix string = ",\"uPackId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.UPackId {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFromAdaptor_SceneDotData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFromAdaptor_SceneDotData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFromAdaptor_SceneDotData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFromAdaptor_SceneDotData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor1(l, v)
}
func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor2(in *jlexer.Lexer, out *ResponseFromAdaptor_ExtraControlData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tvAdFreeFlag":
			if in.IsNull() {
				in.Skip()
				out.TvAdFreeFlag = nil
			} else {
				if out.TvAdFreeFlag == nil {
					out.TvAdFreeFlag = new(int32)
				}
				*out.TvAdFreeFlag = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor2(out *jwriter.Writer, in ResponseFromAdaptor_ExtraControlData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TvAdFreeFlag != nil {
		const prefix string = ",\"tvAdFreeFlag\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(*in.TvAdFreeFlag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFromAdaptor_ExtraControlData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFromAdaptor_ExtraControlData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFromAdaptor_ExtraControlData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFromAdaptor_ExtraControlData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor2(l, v)
}
func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor3(in *jlexer.Lexer, out *ResponseFromAdaptor_DotData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "iFlag":
			if in.IsNull() {
				in.Skip()
				out.IFlag = nil
			} else {
				if out.IFlag == nil {
					out.IFlag = new(int32)
				}
				*out.IFlag = int32(in.Int32())
			}
		case "uiTime":
			if in.IsNull() {
				in.Skip()
				out.UiTime = nil
			} else {
				if out.UiTime == nil {
					out.UiTime = new(uint32)
				}
				*out.UiTime = uint32(in.Uint32())
			}
		case "iProduct":
			if in.IsNull() {
				in.Skip()
				out.IProduct = nil
			} else {
				if out.IProduct == nil {
					out.IProduct = new(int32)
				}
				*out.IProduct = int32(in.Int32())
			}
		case "iAnchor":
			if in.IsNull() {
				in.Skip()
				out.IAnchor = nil
			} else {
				if out.IAnchor == nil {
					out.IAnchor = new(int32)
				}
				*out.IAnchor = int32(in.Int32())
			}
		case "iPosX":
			if in.IsNull() {
				in.Skip()
				out.IPosX = nil
			} else {
				if out.IPosX == nil {
					out.IPosX = new(int32)
				}
				*out.IPosX = int32(in.Int32())
			}
		case "iPosY":
			if in.IsNull() {
				in.Skip()
				out.IPosY = nil
			} else {
				if out.IPosY == nil {
					out.IPosY = new(int32)
				}
				*out.IPosY = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor3(out *jwriter.Writer, in ResponseFromAdaptor_DotData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IFlag != nil {
		const prefix string = ",\"iFlag\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(*in.IFlag))
	}
	if in.UiTime != nil {
		const prefix string = ",\"uiTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.UiTime))
	}
	if in.IProduct != nil {
		const prefix string = ",\"iProduct\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IProduct))
	}
	if in.IAnchor != nil {
		const prefix string = ",\"iAnchor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IAnchor))
	}
	if in.IPosX != nil {
		const prefix string = ",\"iPosX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IPosX))
	}
	if in.IPosY != nil {
		const prefix string = ",\"iPosY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IPosY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFromAdaptor_DotData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFromAdaptor_DotData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFromAdaptor_DotData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFromAdaptor_DotData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor3(l, v)
}
func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor4(in *jlexer.Lexer, out *ResponseFromAdaptor_AdtypeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "str_adtype":
			if in.IsNull() {
				in.Skip()
				out.StrAdtype = nil
			} else {
				if out.StrAdtype == nil {
					out.StrAdtype = new(string)
				}
				*out.StrAdtype = string(in.String())
			}
		case "str_adid":
			if in.IsNull() {
				in.Skip()
				out.StrAdid = nil
			} else {
				if out.StrAdid == nil {
					out.StrAdid = new(string)
				}
				*out.StrAdid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor4(out *jwriter.Writer, in ResponseFromAdaptor_AdtypeData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StrAdtype != nil {
		const prefix string = ",\"str_adtype\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.StrAdtype))
	}
	if in.StrAdid != nil {
		const prefix string = ",\"str_adid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StrAdid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFromAdaptor_AdtypeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFromAdaptor_AdtypeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFromAdaptor_AdtypeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFromAdaptor_AdtypeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacketResponseFromAdaptor4(l, v)
}
func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket(in *jlexer.Lexer, out *ResponseFromAdaptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aid":
			if in.IsNull() {
				in.Skip()
				out.Aid = nil
			} else {
				if out.Aid == nil {
					out.Aid = new(string)
				}
				*out.Aid = string(in.String())
			}
		case "oaid":
			if in.IsNull() {
				in.Skip()
				out.Oaid = nil
			} else {
				if out.Oaid == nil {
					out.Oaid = new(string)
				}
				*out.Oaid = string(in.String())
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(int32)
				}
				*out.Duration = int32(in.Int32())
			}
		case "tpid":
			if in.IsNull() {
				in.Skip()
				out.Tpid = nil
			} else {
				if out.Tpid == nil {
					out.Tpid = new(int32)
				}
				*out.Tpid = int32(in.Int32())
			}
		case "isvip":
			if in.IsNull() {
				in.Skip()
				out.Isvip = nil
			} else {
				if out.Isvip == nil {
					out.Isvip = new(int32)
				}
				*out.Isvip = int32(in.Int32())
			}
		case "add":
			if in.IsNull() {
				in.Skip()
				out.Add = nil
			} else {
				if out.Add == nil {
					out.Add = new(int32)
				}
				*out.Add = int32(in.Int32())
			}
		case "adFlag":
			if in.IsNull() {
				in.Skip()
				out.AdFlag = nil
			} else {
				if out.AdFlag == nil {
					out.AdFlag = new(int32)
				}
				*out.AdFlag = int32(in.Int32())
			}
		case "stopWatch":
			if in.IsNull() {
				in.Skip()
				out.StopWatch = nil
			} else {
				if out.StopWatch == nil {
					out.StopWatch = new(int32)
				}
				*out.StopWatch = int32(in.Int32())
			}
		case "aidSvrType":
			if in.IsNull() {
				in.Skip()
				out.AidSvrType = nil
			} else {
				if out.AidSvrType == nil {
					out.AidSvrType = new(ResponseFromAdaptor_AidServerType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AidSvrType).UnmarshalJSON(data))
				}
			}
		case "aidSvrIP":
			if in.IsNull() {
				in.Skip()
				out.AidSvrIP = nil
			} else {
				if out.AidSvrIP == nil {
					out.AidSvrIP = new(uint32)
				}
				*out.AidSvrIP = uint32(in.Uint32())
			}
		case "xml":
			if in.IsNull() {
				in.Skip()
				out.Xml = nil
			} else {
				if out.Xml == nil {
					out.Xml = new(string)
				}
				*out.Xml = string(in.String())
			}
		case "int32_trans_type":
			if in.IsNull() {
				in.Skip()
				out.Int32TransType = nil
			} else {
				if out.Int32TransType == nil {
					out.Int32TransType = new(int32)
				}
				*out.Int32TransType = int32(in.Int32())
			}
		case "vecDotData":
			if in.IsNull() {
				in.Skip()
				out.VecDotData = nil
			} else {
				in.Delim('[')
				if out.VecDotData == nil {
					if !in.IsDelim(']') {
						out.VecDotData = make([]*ResponseFromAdaptor_DotData, 0, 8)
					} else {
						out.VecDotData = []*ResponseFromAdaptor_DotData{}
					}
				} else {
					out.VecDotData = (out.VecDotData)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *ResponseFromAdaptor_DotData
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(ResponseFromAdaptor_DotData)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.VecDotData = append(out.VecDotData, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stSourceData":
			if in.IsNull() {
				in.Skip()
				out.StSourceData = nil
			} else {
				if out.StSourceData == nil {
					out.StSourceData = new(ResponseFromAdaptor_SourceData)
				}
				(*out.StSourceData).UnmarshalEasyJSON(in)
			}
		case "iUserType":
			if in.IsNull() {
				in.Skip()
				out.IUserType = nil
			} else {
				if out.IUserType == nil {
					out.IUserType = new(int32)
				}
				*out.IUserType = int32(in.Int32())
			}
		case "ullStartTimeStamp":
			if in.IsNull() {
				in.Skip()
				out.UllStartTimeStamp = nil
			} else {
				if out.UllStartTimeStamp == nil {
					out.UllStartTimeStamp = new(uint64)
				}
				*out.UllStartTimeStamp = uint64(in.Uint64())
			}
		case "strJson":
			if in.IsNull() {
				in.Skip()
				out.StrJson = nil
			} else {
				if out.StrJson == nil {
					out.StrJson = new(string)
				}
				*out.StrJson = string(in.String())
			}
		case "cover_name":
			if in.IsNull() {
				in.Skip()
				out.CoverName = nil
			} else {
				if out.CoverName == nil {
					out.CoverName = new(string)
				}
				*out.CoverName = string(in.String())
			}
		case "video_name":
			if in.IsNull() {
				in.Skip()
				out.VideoName = nil
			} else {
				if out.VideoName == nil {
					out.VideoName = new(string)
				}
				*out.VideoName = string(in.String())
			}
		case "column_name":
			if in.IsNull() {
				in.Skip()
				out.ColumnName = nil
			} else {
				if out.ColumnName == nil {
					out.ColumnName = new(string)
				}
				*out.ColumnName = string(in.String())
			}
		case "str_vid":
			if in.IsNull() {
				in.Skip()
				out.StrVid = nil
			} else {
				if out.StrVid == nil {
					out.StrVid = new(string)
				}
				*out.StrVid = string(in.String())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]uint32, 0, 16)
					} else {
						out.Labels = []uint32{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v8 uint32
					v8 = uint32(in.Uint32())
					out.Labels = append(out.Labels, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stAdtypeData":
			if in.IsNull() {
				in.Skip()
				out.StAdtypeData = nil
			} else {
				in.Delim('[')
				if out.StAdtypeData == nil {
					if !in.IsDelim(']') {
						out.StAdtypeData = make([]*ResponseFromAdaptor_AdtypeData, 0, 8)
					} else {
						out.StAdtypeData = []*ResponseFromAdaptor_AdtypeData{}
					}
				} else {
					out.StAdtypeData = (out.StAdtypeData)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *ResponseFromAdaptor_AdtypeData
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(ResponseFromAdaptor_AdtypeData)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					out.StAdtypeData = append(out.StAdtypeData, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stSceneDot":
			if in.IsNull() {
				in.Skip()
				out.StSceneDot = nil
			} else {
				in.Delim('[')
				if out.StSceneDot == nil {
					if !in.IsDelim(']') {
						out.StSceneDot = make([]*ResponseFromAdaptor_SceneDotData, 0, 8)
					} else {
						out.StSceneDot = []*ResponseFromAdaptor_SceneDotData{}
					}
				} else {
					out.StSceneDot = (out.StSceneDot)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *ResponseFromAdaptor_SceneDotData
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(ResponseFromAdaptor_SceneDotData)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.StSceneDot = append(out.StSceneDot, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uin":
			if in.IsNull() {
				in.Skip()
				out.Uin = nil
			} else {
				if out.Uin == nil {
					out.Uin = new(uint64)
				}
				*out.Uin = uint64(in.Uint64())
			}
		case "extraData":
			if in.IsNull() {
				in.Skip()
				out.ExtraData = nil
			} else {
				if out.ExtraData == nil {
					out.ExtraData = new(ResponseFromAdaptor_ExtraControlData)
				}
				(*out.ExtraData).UnmarshalEasyJSON(in)
			}
		case "trytime_second":
			if in.IsNull() {
				in.Skip()
				out.TrytimeSecond = nil
			} else {
				if out.TrytimeSecond == nil {
					out.TrytimeSecond = new(uint32)
				}
				*out.TrytimeSecond = uint32(in.Uint32())
			}
		case "trytime_withad_flag":
			if in.IsNull() {
				in.Skip()
				out.TrytimeWithadFlag = nil
			} else {
				if out.TrytimeWithadFlag == nil {
					out.TrytimeWithadFlag = new(uint32)
				}
				*out.TrytimeWithadFlag = uint32(in.Uint32())
			}
		case "strTagSource":
			if in.IsNull() {
				in.Skip()
				out.StrTagSource = nil
			} else {
				if out.StrTagSource == nil {
					out.StrTagSource = new(string)
				}
				*out.StrTagSource = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket(out *jwriter.Writer, in ResponseFromAdaptor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Aid != nil {
		const prefix string = ",\"aid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Aid))
	}
	if in.Oaid != nil {
		const prefix string = ",\"oaid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Oaid))
	}
	if in.Duration != nil {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Duration))
	}
	if in.Tpid != nil {
		const prefix string = ",\"tpid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Tpid))
	}
	if in.Isvip != nil {
		const prefix string = ",\"isvip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Isvip))
	}
	if in.Add != nil {
		const prefix string = ",\"add\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Add))
	}
	if in.AdFlag != nil {
		const prefix string = ",\"adFlag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.AdFlag))
	}
	if in.StopWatch != nil {
		const prefix string = ",\"stopWatch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.StopWatch))
	}
	if in.AidSvrType != nil {
		const prefix string = ",\"aidSvrType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.AidSvrType))
	}
	if in.AidSvrIP != nil {
		const prefix string = ",\"aidSvrIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.AidSvrIP))
	}
	if in.Xml != nil {
		const prefix string = ",\"xml\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Xml))
	}
	if in.Int32TransType != nil {
		const prefix string = ",\"int32_trans_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Int32TransType))
	}
	if len(in.VecDotData) != 0 {
		const prefix string = ",\"vecDotData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.VecDotData {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.StSourceData != nil {
		const prefix string = ",\"stSourceData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StSourceData).MarshalEasyJSON(out)
	}
	if in.IUserType != nil {
		const prefix string = ",\"iUserType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.IUserType))
	}
	if in.UllStartTimeStamp != nil {
		const prefix string = ",\"ullStartTimeStamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.UllStartTimeStamp))
	}
	if in.StrJson != nil {
		const prefix string = ",\"strJson\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StrJson))
	}
	if in.CoverName != nil {
		const prefix string = ",\"cover_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CoverName))
	}
	if in.VideoName != nil {
		const prefix string = ",\"video_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.VideoName))
	}
	if in.ColumnName != nil {
		const prefix string = ",\"column_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ColumnName))
	}
	if in.StrVid != nil {
		const prefix string = ",\"str_vid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StrVid))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Labels {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.StAdtypeData) != 0 {
		const prefix string = ",\"stAdtypeData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.StAdtypeData {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					(*v16).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.StSceneDot) != 0 {
		const prefix string = ",\"stSceneDot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.StSceneDot {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Uin != nil {
		const prefix string = ",\"uin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Uin))
	}
	if in.ExtraData != nil {
		const prefix string = ",\"extraData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ExtraData).MarshalEasyJSON(out)
	}
	if in.TrytimeSecond != nil {
		const prefix string = ",\"trytime_second\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.TrytimeSecond))
	}
	if in.TrytimeWithadFlag != nil {
		const prefix string = ",\"trytime_withad_flag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.TrytimeWithadFlag))
	}
	if in.StrTagSource != nil {
		const prefix string = ",\"strTagSource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StrTagSource))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFromAdaptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFromAdaptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFromAdaptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFromAdaptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket(l, v)
}
func easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket1(in *jlexer.Lexer, out *Request2Adaptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cookies":
			if in.IsNull() {
				in.Skip()
				out.Cookies = nil
			} else {
				in.Delim('[')
				if out.Cookies == nil {
					if !in.IsDelim(']') {
						out.Cookies = make([]string, 0, 4)
					} else {
						out.Cookies = []string{}
					}
				} else {
					out.Cookies = (out.Cookies)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Cookies = append(out.Cookies, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				in.Delim('[')
				if out.Params == nil {
					if !in.IsDelim(']') {
						out.Params = make([]string, 0, 4)
					} else {
						out.Params = []string{}
					}
				} else {
					out.Params = (out.Params)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Params = append(out.Params, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "raw_referer":
			if in.IsNull() {
				in.Skip()
				out.RawReferer = nil
			} else {
				out.RawReferer = in.Bytes()
			}
		case "req_protocol":
			if in.IsNull() {
				in.Skip()
				out.ReqProtocol = nil
			} else {
				if out.ReqProtocol == nil {
					out.ReqProtocol = new(Request2Adaptor_AdReqProtocolType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReqProtocol).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket1(out *jwriter.Writer, in Request2Adaptor) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Cookies) != 0 {
		const prefix string = ",\"cookies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v22, v23 := range in.Cookies {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if len(in.Params) != 0 {
		const prefix string = ",\"params\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Params {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.RawReferer) != 0 {
		const prefix string = ",\"raw_referer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.RawReferer)
	}
	if in.ReqProtocol != nil {
		const prefix string = ",\"req_protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.ReqProtocol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request2Adaptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request2Adaptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson82b1a6beEncodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request2Adaptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request2Adaptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson82b1a6beDecodeGithubComForrestSuWiresharkPluginCoreParserStubAdPacket1(l, v)
}
