// Package aid_module comment
// This file war generated by trpc4videopacket 1.0
// Generated from aid_module.jce
package aid_module

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// AidInfo struct implement
type AidInfo struct {
	IAid           int32       `json:"iAid,omitempty"`
	IVipType       int32       `json:"iVipType,omitempty"`
	StrRefreshid   string      `json:"strRefreshid,omitempty"`
	IDuration      int32       `json:"iDuration,omitempty"`
	ITpid          int32       `json:"iTpid,omitempty"`
	StrPreVid      string      `json:"strPreVid,omitempty"`
	StrVipKey      string      `json:"strVipKey,omitempty"`
	IIsVip         int32       `json:"iIsVip,omitempty"`
	Adfree_flag    int32       `json:"adfree_flag,omitempty"`
	Trytime_second int32       `json:"trytime_second,omitempty"`
	Vid_type       EnumVidType `json:"vid_type,omitempty"`
}

func (st *AidInfo) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *AidInfo) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.IAid, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IVipType, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.StrRefreshid, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IDuration, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ITpid, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.StrPreVid, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.StrVipKey, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IIsVip, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Adfree_flag, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Trytime_second, 10, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.Vid_type), 12, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *AidInfo) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AidInfo, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *AidInfo) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = _os.Write_int32(st.IAid, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IVipType, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.StrRefreshid, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IDuration, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ITpid, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.StrPreVid, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.StrVipKey, 7)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IIsVip, 8)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Adfree_flag, 9)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Trytime_second, 10)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.Vid_type), 12)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *AidInfo) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
